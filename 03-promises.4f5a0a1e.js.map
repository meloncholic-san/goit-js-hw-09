{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,QAC1CC,WAAYF,SAASC,cAAc,yBACnCE,UAAWH,SAASC,cAAc,wBAClCG,YAAaJ,SAASC,cAAc,2BAiCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAGnBA,E,IAxCPT,EAAKC,kBAAkBe,iBAAiB,UAGvC,SAA8BC,GAC7BA,EAAMC,iBACN,IAAMC,EAAeC,OAAOpB,EAAKI,WAAWiB,OACtCC,EAAcF,OAAOpB,EAAKK,UAAUgB,OACpCE,EAAgBH,OAAOpB,EAAKM,YAAYe,OAG9CG,QAAQC,IAAI,SAAUN,GACtBK,QAAQC,IAAI,QAASH,GACrBE,QAAQC,IAAI,UAAWF,GAGvB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAeG,IAAK,CAGtCnB,EAAcmB,EAAI,EAFGP,EAAeO,EAAIJ,GAGvCK,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAEvEwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA/B,GAASgC,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  createPromiseForm: document.querySelector(\"form\"),\n  inputDelay: document.querySelector(\"input[name = 'delay']\"),\n  inputStep: document.querySelector(\"input[name = 'step']\"),\n  inputAmount: document.querySelector(\"input[name = 'amount']\"),\n};\n\nrefs.createPromiseForm.addEventListener('submit', createPromiseHandler);\n\n\n function createPromiseHandler(event) {\n  event.preventDefault();\n  const promiseDelay = Number(refs.inputDelay.value);\n  const promiseStep = Number(refs.inputStep.value);\n  const promiseAmount = Number(refs.inputAmount.value);\n\n\n  console.log('Delay:', promiseDelay);\n  console.log('Step:', promiseStep);\n  console.log('Amount:', promiseAmount);\n\n\n  for (let i = 0; i < promiseAmount; i++) {\n    const currentDelay = promiseDelay + i * promiseStep;\n\n    createPromise(i + 1, currentDelay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n\n    }, delay);\n\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$refs","createPromiseForm","document","querySelector","inputDelay","inputStep","inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","promiseDelay","Number","value","promiseStep","promiseAmount","console","log","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.4f5a0a1e.js.map"}